# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import banking_pb2 as banking__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in banking_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AccountManagementStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBalance = channel.unary_unary(
                '/banking.AccountManagement/GetBalance',
                request_serializer=banking__pb2.GetBalanceRequest.SerializeToString,
                response_deserializer=banking__pb2.BalanceResponse.FromString,
                _registered_method=True)
        self.UpdateBalance = channel.unary_unary(
                '/banking.AccountManagement/UpdateBalance',
                request_serializer=banking__pb2.UpdateBalanceRequest.SerializeToString,
                response_deserializer=banking__pb2.BalanceResponse.FromString,
                _registered_method=True)


class AccountManagementServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=banking__pb2.GetBalanceRequest.FromString,
                    response_serializer=banking__pb2.BalanceResponse.SerializeToString,
            ),
            'UpdateBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBalance,
                    request_deserializer=banking__pb2.UpdateBalanceRequest.FromString,
                    response_serializer=banking__pb2.BalanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'banking.AccountManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('banking.AccountManagement', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AccountManagement(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/banking.AccountManagement/GetBalance',
            banking__pb2.GetBalanceRequest.SerializeToString,
            banking__pb2.BalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/banking.AccountManagement/UpdateBalance',
            banking__pb2.UpdateBalanceRequest.SerializeToString,
            banking__pb2.BalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TransactionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitiateTransfer = channel.unary_unary(
                '/banking.Transaction/InitiateTransfer',
                request_serializer=banking__pb2.TransferRequest.SerializeToString,
                response_deserializer=banking__pb2.TransferResponse.FromString,
                _registered_method=True)
        self.GetTransactionHistory = channel.unary_unary(
                '/banking.Transaction/GetTransactionHistory',
                request_serializer=banking__pb2.HistoryRequest.SerializeToString,
                response_deserializer=banking__pb2.HistoryResponse.FromString,
                _registered_method=True)


class TransactionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitiateTransfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactionHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitiateTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiateTransfer,
                    request_deserializer=banking__pb2.TransferRequest.FromString,
                    response_serializer=banking__pb2.TransferResponse.SerializeToString,
            ),
            'GetTransactionHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransactionHistory,
                    request_deserializer=banking__pb2.HistoryRequest.FromString,
                    response_serializer=banking__pb2.HistoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'banking.Transaction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('banking.Transaction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Transaction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitiateTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/banking.Transaction/InitiateTransfer',
            banking__pb2.TransferRequest.SerializeToString,
            banking__pb2.TransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTransactionHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/banking.Transaction/GetTransactionHistory',
            banking__pb2.HistoryRequest.SerializeToString,
            banking__pb2.HistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
